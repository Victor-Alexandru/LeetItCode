#Given the root of a binary search tree with distinct values,
#modify it so that every node has a new value equal to the sum of the values of the original 
#tree that are greater than or equal to node.val.
#As a reminder, a binary search tree is a tree that satisfies these constraints:
#The left subtree of a node contains only nodes with keys less than the node's key.
#The right subtree of a node contains only nodes with keys greater than the node's key.
#Both the left and right subtrees must also be binary search trees.

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def bstToGst(self, root: TreeNode) -> TreeNode:
        def DFS(node, acc):
            if not node: return acc
            acc = DFS(node.right, acc) + node.val
            node.val = acc
            return DFS(node.left, acc)
        DFS(root,0)
        return root
         
        

s = Solution()
print(s.bstToGst([4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]))
